package parserTests

import com.natpryce.hamkrest.assertion.assertThat
import com.natpryce.hamkrest.equalTo
import exceptions.UndeclaredError
import exceptions.WrongTokenTypeError
import lexer.Token
import org.junit.jupiter.api.Assertions.assertThrows
import org.junit.jupiter.api.Test
import parser.Parser
import parser.AstNode
import parser.ParserWithoutBuiltins

class FunctionCallTests {
    @Test
    fun canParseFunctionCallWithoutParameters() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf()
                        )
                )
        )
    }

    @Test
    fun canParseFunctionCallWithOverloading() {
        assertThat(
                listOf(

                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("toString"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,

                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Text,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("toString"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Text,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,

                        Token.Literal.Number(5.0),
                        Token.Identifier("toString"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(listOf(AstNode.Type.Number), AstNode.Type.Text),
                                AstNode.Command.Expression.Value.Identifier("toString"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),

                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(listOf(AstNode.Type.Text), AstNode.Type.Text),
                                AstNode.Command.Expression.Value.Identifier("toString"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Text,
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("toString"),
                                listOf(AstNode.Command.Expression.Value.Literal.Number(5.0)
                                )
                        )
                )
        )
    }

    @Test
    fun canParseFunctionCallOneParameter() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Literal.Number(5.0),
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Number),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(AstNode.Command.Expression.Value.Literal.Number(5.0)
                                )
                        )
                )
        )
    }
    @Test
    fun canParseFunctionCallHighOrder() {
        assertThat(
                listOf(
                        Token.Type.Var,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,

                        Token.Type.Var,
                        Token.Identifier("myTextFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.SpecialChar.Colon,
                        Token.Identifier("myTextFunc"),
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Func.ExplicitFunc(listOf(),AstNode.Type.Text)),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Func.ExplicitFunc(listOf(),AstNode.Type.Text),
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                    AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),

                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(listOf(),AstNode.Type.Text),
                                AstNode.Command.Expression.Value.Identifier("myTextFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                    AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(AstNode.Command.Expression.Value.Identifier("myTextFunc"))
                        )
                )
        )
    }
    @Test
    fun failParseFunctionCallHighOrderWithWrongSignature() {

        val lexer = DummyLexer(listOf(
                Token.Type.Var,
                Token.Identifier("myFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Func,
                Token.SpecialChar.SquareBracketStart,
                Token.Type.Text,
                Token.SpecialChar.SquareBracketEnd,
                Token.Identifier("myParam"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Text,
                Token.SpecialChar.BlockStart,
                Token.Literal.Text("HEY HEY"),
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,

                Token.Type.Var,
                Token.Identifier("myTextFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Text,
                Token.Identifier("myParam"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Text,
                Token.SpecialChar.BlockStart,
                Token.Literal.Text("BLA BLA"),
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,
                Token.SpecialChar.Colon,
                Token.Identifier("myTextFunc"),
                Token.Identifier("myFunc"),
                Token.SpecialChar.EndOfLine
        ))
        assertThrows(UndeclaredError::class.java) { ParserWithoutBuiltins(lexer).generateAbstractSyntaxTree() }
    }

    @Test
    fun failsParseFunctionCallNeedsOneArgumentButGetsZero() {
        val lexer = DummyLexer(listOf(
                Token.Type.Func,
                Token.SpecialChar.SquareBracketStart,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Text,
                Token.SpecialChar.SquareBracketEnd,
                Token.Identifier("myFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Number,
                Token.Identifier("myParam"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Text,
                Token.SpecialChar.BlockStart,
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,
                Token.Identifier("myFunc"),
                Token.SpecialChar.EndOfLine
        ))
        //TODO use less generic error
        assertThrows(Exception::class.java) { ParserWithoutBuiltins(lexer).generateAbstractSyntaxTree() }
    }

    @Test
    fun failsParseFunctionCallNeedsOneArgumentButGetsTwo() {
        val lexer = DummyLexer(listOf(
                Token.Type.Func,
                Token.SpecialChar.SquareBracketStart,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Text,
                Token.SpecialChar.SquareBracketEnd,
                Token.Identifier("myFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Number,
                Token.Identifier("myParam"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Text,
                Token.SpecialChar.BlockStart,
                Token.Literal.Text("HEY"),
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,
                Token.Literal.Number(5.0),
                Token.Identifier("myFunc"),
                Token.Literal.Number(5.0),
                Token.SpecialChar.EndOfLine
        ))

        assertThrows(WrongTokenTypeError::class.java) { ParserWithoutBuiltins(lexer).generateAbstractSyntaxTree() }
    }

    @Test
    fun canParseFunctionCallWithTupleLiteralAsFirstArgument() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Tuple,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Tuple,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Literal.Number(5.0),
                        Token.SpecialChar.ListSeparator,
                        Token.Literal.Text("hej"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(
                                                AstNode.Type.Tuple(
                                                        listOf(
                                                                AstNode.Type.Number,
                                                                AstNode.Type.Text
                                                        )
                                                )
                                        ),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Tuple(
                                                                listOf(
                                                                        AstNode.Type.Number,
                                                                        AstNode.Type.Text
                                                                )
                                                        ),
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(
                                        AstNode.Command.Expression.Value.Literal.Tuple(
                                                listOf(
                                                        AstNode.Command.Expression.Value.Literal.Number(5.0),
                                                        AstNode.Command.Expression.Value.Literal.Text("hej")
                                                )
                                        )
                                )
                        )
                )
        )
    }

    @Test
    fun failsToParseFunctionCallWith_FunctionCallWithArguments_AsRightHandSideArgumentWithoutParentheses() {
        val lexer = DummyLexer(listOf(
                Token.Type.Func,
                Token.SpecialChar.SquareBracketStart,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Number,
                Token.SpecialChar.SquareBracketEnd,
                Token.Identifier("myFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Number,
                Token.Identifier("myParam1"),
                Token.SpecialChar.ListSeparator,
                Token.Type.Number,
                Token.Identifier("myParam2"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Number,
                Token.SpecialChar.BlockStart,
                Token.Literal.Number(5.0),
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,
                Token.Literal.Number(5.0),
                Token.Identifier("myFunc"),
                Token.Identifier("myFunc"),
                Token.Literal.Number(5.0),
                Token.SpecialChar.EndOfLine
        ))
        assertThrows(Exception::class.java) { ParserWithoutBuiltins(lexer).generateAbstractSyntaxTree() }
    }

    @Test
    fun canParseFunctionCallWith_FunctionCallWithoutArguments_AsRightHandSideArgumentWithoutParentheses() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Number,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam1"),
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Number,
                        Token.Identifier("myParam2"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Number,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Number(5.0),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc2"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Number,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Number(5.0),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Literal.Number(5.0),
                        Token.Identifier("myFunc"),
                        Token.Identifier("myFunc2"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Number, AstNode.Type.Number),
                                        AstNode.Type.Number
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam1")),
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam2"))
                                        ),
                                        AstNode.Type.Number,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                    AstNode.Command.Expression.Value.Literal.Number(5.0)
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(),
                                        AstNode.Type.Number
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc2"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(),
                                        AstNode.Type.Number,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Number(5.0)
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(
                                        AstNode.Command.Expression.Value.Literal.Number(5.0),
                                        AstNode.Command.Expression.FunctionCall(
                                                AstNode.Command.Expression.Value.Identifier("myFunc2"),
                                                listOf()
                                        )
                                )
                        )
                )
        )
    }

    @Test
    fun failsParseFunctionCallNeedsTwoArgumentButGetsThree() {
        val lexer = DummyLexer(listOf(
                Token.Type.Func,
                Token.SpecialChar.SquareBracketStart,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Number,
                Token.SpecialChar.ListSeparator,
                Token.Type.Text,
                Token.SpecialChar.SquareBracketEnd,
                Token.Identifier("myFunc"),
                Token.SpecialChar.Equals,
                Token.SpecialChar.ParenthesesStart,
                Token.Type.Number,
                Token.Identifier("myParam1"),
                Token.SpecialChar.ListSeparator,
                Token.Type.Number,
                Token.Identifier("myParam2"),
                Token.SpecialChar.ParenthesesEnd,
                Token.SpecialChar.Colon,
                Token.Type.Text,
                Token.SpecialChar.BlockStart,
                Token.Literal.Text("HEY"),
                Token.SpecialChar.BlockEnd,
                Token.SpecialChar.EndOfLine,
                Token.Literal.Number(5.0),
                Token.Identifier("myFunc"),
                Token.Literal.Number(5.0),
                Token.Literal.Text("hej"),
                Token.SpecialChar.EndOfLine
        ))
        assertThrows(WrongTokenTypeError::class.java) { ParserWithoutBuiltins(lexer).generateAbstractSyntaxTree() }
    }

    @Test
    fun canParseTwoCallsWithOneParameterEach() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Number,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Number,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Number(5.0),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Literal.Number(5.0),
                        Token.Identifier("myFunc"),
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Number),
                                        AstNode.Type.Number
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam"))
                                        ),
                                        AstNode.Type.Number,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Number(5.0)
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(
                                        AstNode.Command.Expression.FunctionCall(
                                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                                listOf(AstNode.Command.Expression.Value.Literal.Number(5.0))
                                        )
                                )
                        )
                )
        )
    }

    @Test
    fun canParseFunctionCallTwoParameters() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam1"),
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.Identifier("myParam2"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Literal.Number(5.0),
                        Token.Identifier("myFunc"),
                        Token.Literal.Text("hej"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Number, AstNode.Type.Text),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam1")),
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Text,
                                                        AstNode.Command.Expression.Value.Identifier("myParam2"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(AstNode.Command.Expression.Value.Literal.Number(5.0),
                                        AstNode.Command.Expression.Value.Literal.Text("hej")
                                )
                        )
                )
        )
    }

    @Test
    fun canParseFunctionCallFourParameters() {
        assertThat(
                listOf(
                        Token.Type.Func,
                        Token.SpecialChar.SquareBracketStart,
                        Token.Type.Number,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.SpecialChar.SquareBracketEnd,
                        Token.Identifier("myFunc"),
                        Token.SpecialChar.Equals,
                        Token.SpecialChar.ParenthesesStart,
                        Token.Type.Number,
                        Token.Identifier("myParam1"),
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.Identifier("myParam2"),
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.Identifier("myParam3"),
                        Token.SpecialChar.ListSeparator,
                        Token.Type.Text,
                        Token.Identifier("myParam4"),
                        Token.SpecialChar.ParenthesesEnd,
                        Token.SpecialChar.Colon,
                        Token.Type.Text,
                        Token.SpecialChar.BlockStart,
                        Token.Literal.Text("HEY"),
                        Token.SpecialChar.BlockEnd,
                        Token.SpecialChar.EndOfLine,
                        Token.Literal.Number(5.0),
                        Token.Identifier("myFunc"),
                        Token.Literal.Text("hej"),
                        Token.Literal.Text("med"),
                        Token.Literal.Text("dig"),
                        Token.SpecialChar.EndOfLine
                ),
                matchesAstChildren(
                        AstNode.Command.Declaration(
                                AstNode.Type.Func.ExplicitFunc(
                                        listOf(AstNode.Type.Number, AstNode.Type.Text, AstNode.Type.Text, AstNode.Type.Text),
                                        AstNode.Type.Text
                                ),
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                AstNode.Command.Expression.LambdaExpression(
                                        listOf(
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Number,
                                                        AstNode.Command.Expression.Value.Identifier("myParam1")),
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Text,
                                                        AstNode.Command.Expression.Value.Identifier("myParam2")),
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Text,
                                                        AstNode.Command.Expression.Value.Identifier("myParam3")),
                                                AstNode.ParameterDeclaration(
                                                        AstNode.Type.Text,
                                                        AstNode.Command.Expression.Value.Identifier("myParam4"))
                                        ),
                                        AstNode.Type.Text,
                                        AstNode.Command.Expression.LambdaBody(listOf(
                                                AstNode.Command.Return(
                                                        AstNode.Command.Expression.Value.Literal.Text("HEY")
                                                )
                                        ))
                                )
                        ),
                        AstNode.Command.Expression.FunctionCall(
                                AstNode.Command.Expression.Value.Identifier("myFunc"),
                                listOf(AstNode.Command.Expression.Value.Literal.Number(5.0),
                                        AstNode.Command.Expression.Value.Literal.Text("hej"),
                                        AstNode.Command.Expression.Value.Literal.Text("med"),
                                        AstNode.Command.Expression.Value.Literal.Text("dig")
                                )
                        )
                )
        )
    }
}
