**************************************************************
CFG
**************************************************************

Program --> Start $

Start --> FunctionDcl Start
        | VarDcl Start
        | EPSILON

Operator --> BracketL
           | BracketR
           | ParenL
           | ParenR
           | CurlyL
           | CurlyR
           | =
           | ::
           | <
           | >

CurlyL   --> {
CurlyR   --> }
ParenL   --> (
ParenR   --> )
BracketL --> [
BracketR --> ]

Type --> number
       | text
       | tuple
       | list
       | dict
       | char
       | none
       | lambda

Linebreak --> \r\n
            | ;

Expression --> FunctionCall
             | Value

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | literalChar
          | literalTuple
          | literalList
          | literalDict
          | LambdaExpression

Statements --> Statement LineBreak Statements
             | EPSILON

Statement --> VarDcl
            | VarAssign
            | Expression
            | ReturnStatement

VarDcl --> Type identifier
         | Type VarAssign

VarAssign --> identifier = Expression

FunctionDcl --> func identifier = LambdaExpression

FunDclParamList --> FunDclParameter
                  | FunDclParameter, FunDclParamList

FunDclParameter --> Type identifier

FunctionCall --> identifier
               | FunCallParameter identifier
               | FunCallParameter identifier FunCallParamList

FunCallParamList --> FunCallParameter FunCallParameterList
                   | ParenL FunCallParameter FunCallParameterList ParenR

FunCallParameter --> Value
                   | ::identifier
                   | LambdaExpression

LambdaExpression --> ParenL FunDclParamList ParenR -> Type CurlyL Statements CurlyR
		   | ParenL ParenR -> Type CurlyL Statements CurlyR

ReturnStatement --> return Expression
