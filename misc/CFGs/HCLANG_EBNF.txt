HCLANG - EBNF

Notation:
Terminal: lowercase
Non-terminal: PascalCase
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

Program --> Commands $

Commands --> {FunctionDcl | VarDcl | VarAssign | Expression}

Operator --> bracketL
           | bracketR
           | parenL
           | parenR
           | curlyL
           | curlyR
           | assign
           | functionPassOp
           | arrow

Type --> number
       | text
       | tuple
       | list
       | dict
       | none
       | var

Expression --> FunctionCall
             | Value

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | literalTuple
          | literalList
          | literalDict
          | LambdaExpression

Statements --> {Statement}

Statement --> VarDcl linebreak
            | VarAssign linebreak
            | Expression linebreak
            | ReturnStatement linebreak

VarDcl --> Type identifier [assign Expression]

VarAssign --> identifier assign Expression

FunctionDcl --> func identifier assign parenL [FunDclParamList] parenR arrow Type curlyL Statements curlyR

FunDclParamList --> Parameter [comma FunDclParamList]

FunDclParameter --> Type identifier

FunctionCall --> identifier
               | FunCallParameter identifier
               | FunCallParameter identifier FunCallParamList

FunCallParamList --> {FunCallParameter}
                   | parenL {FunCallParameter} parenR

FunCallParameter --> Value
                   | functionPassOp identifier

LambdaExpression --> [parenL [FunDclParamList] parenR arrow Type] curlyL Statements curlyR

ReturnStatement --> return Expression
