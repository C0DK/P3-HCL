HCLANG - EBNF

Notation:
Terminal: lowercase
Non-terminal: PascalCase
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

Program --> Commands $

Commands --> {Declaration | Assignment | Expression}

Type --> number
       | text
       | tuple
       | list squareBracketStart [Type] squareBracketStop
       | bool
       | func squareBracketStart [Types] squareBracketStop
       | none
       | var

TypeImplicit --> Type
       | func

Types --> Type [, Types]

Expression --> FunctionCall
             | Value

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | literalTuple
          | literalList

Statements --> {Statement}

Statement --> VarDcl linebreak
            | Assignment linebreak
            | Expression linebreak
            | ReturnStatement linebreak

DeclarationValue --> Expression
                    | LambdaExpression

Declaration --> TypeImplicit identifier [equals DeclarationValue]


Assignment --> identifier equals DeclarationValue



LambdaExpression --> parenL [FunDclParamList] parenR arrow Type LambdaBody

LambdaBody --> curlyL Statements curlyR



FunDclParamList --> Parameter [comma FunDclParamList]

FunDclParameter --> Type identifier

FunctionCall --> identifier
               | FunCallParameter identifier
               | FunCallParameter identifier FunCallParamList

FunCallParamList --> {FunCallParameter}
                   | parenL {FunCallParameter} parenR

FunCallParameter --> Value
                   | identifier
                   | LambdaExpression
                   | LambdaBody

ReturnStatement --> return Expression
