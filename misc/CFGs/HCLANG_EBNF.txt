HCLANG - EBNF

Notation:
Terminal: lowercase
Non-terminal: PascalCase
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

Operator --> BracketL
           | BracketR
           | ParenL
           | ParenR
           | CurlyL
           | CurlyR
           | =
           | ::
           | <
           | >

CurlyL   --> {
CurlyR   --> }
ParenL   --> (
ParenR   --> )
BracketL --> [
BracketR --> ]

Type --> number
       | text
       | tuple
       | list
       | dict
       | char
       | none
       | lambda

Linebreak --> \r\n
            | ;

Expression --> FunctionCall
             | Value

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | literalChar
          | literalTuple
          | literalList
          | literalDict
          | LambdaExpression

Statements --> {Statement}+
Statement  --> VarDcl
             | VarAssign
             | Expression
             | FunctionDcl

VarDcl    --> Type identifier [= Expression] Linebreak
VarAssign --> identifier = Expression Linebreak

FunctionDcl     --> func identifier = LambdaExpression
FunDclParamList --> Parameter [, FunDclParamList]
Parameter       --> Type identifier

FunctionCall --> identifier
               | FunCallParameter identifier
               | FunCallParameter identifier FunCallParamList
FunCallParamList --> {FunCallParameter}+
                   | ParenL {FunCallParameter}+ ParenR
FunCallParameter --> Value
                   | ::identifier
                   | LambdaExpression

LambdaExpression --> ParenL [FunDclParamList] ParenR -> Type CurlyL Statements CurlyR