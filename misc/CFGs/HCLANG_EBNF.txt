HCLANG - EBNF

Notation:
Terminal: lowercase
Non-terminal: PascalCase
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

Program --> Commands $


Type --> number
       | text
       | tuple squareBracketStart [Types] squareBracketStop
       | list squareBracketStart [Type] squareBracketStop
       | bool
       | func
       | none
       | var

Expression --> FunctionCall
             | Value
             | LambdaExpression

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | literalTuple
          | literalList

Values --> Value [, Values]

literalTuple --> (Values)
literalList --> [Values]

Commands --> {Command}

Command --> VarDcl linebreak
            | Assignment linebreak
            | Expression linebreak
            | ReturnCommand linebreak

Declaration --> Type identifier [equals Expression]

Assignment --> identifier equals DeclarationValue

LambdaExpression --> [parenL [FunDclParamList] parenR arrow Type] curlyL Statements curlyR

FunDclParamList --> Parameter [comma FunDclParamList]

FunDclParameter --> Type identifier

FunctionCall --> identifier
               | FunCallParameter identifier
               | FunCallParameter identifier FunCallParamList

FunCallParamList --> {FunCallParameter}
                   | parenL {FunCallParameter} parenR

FunCallParameter --> Value
                   | functionPassOp identifier

ReturnCommand --> return Expression
