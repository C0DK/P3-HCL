HCLANG - EBNF

Notation:
Terminal: lowercase
Non-terminal: PascalCase
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

Program --> Commands $


Type --> number
       | text
       | tuple squareBracketStart [Types] squareBracketStop
       | list squareBracketStart [Type] squareBracketStop
       | bool
       | func squareBracketStart [Types] squareBracketStop
       | none
       | var

TypeImplicit --> Type
       | func

Types --> Type [, Types]

Expression --> FunctionCall
             | Value

Value --> Literal
        | identifier

Literal --> literalNumber
          | literalText
          | LiteralTuple
          | LiteralList
          | literalBool

Values --> Value [, Values]

LiteralTuple --> (Values)
LiteralList --> [Values]

Commands --> {Command}

Command --> VarDcl linebreak
            | Assignment linebreak
            | Expression linebreak
            | ReturnCommand linebreak

DeclarationValue --> Expression
                    | LambdaExpression

Declaration --> TypeImplicit identifier [equals DeclarationValue]


Assignment --> identifier equals DeclarationValue



LambdaExpression --> parenL [FunDclParamList] parenR colon Type LambdaBody

LambdaBody --> curlyL Commands curlyR



FunDclParamList --> FunDclParameter [comma FunDclParamList]

FunDclParameter --> Type identifier

FunctionCall --> identifier
               | Arg identifier [Args]

Args --> {Arg}
        | parenL {Arg} parenR

Arg --> Value
        | LambdaExpression
        | LambdaBody

ReturnCommand --> return Expression
