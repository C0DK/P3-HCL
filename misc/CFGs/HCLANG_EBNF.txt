

Notation:

Terminal:     camelCase
Non-terminal: <PascalCase>
something:    1 occurrence of something
[something]:  something 0 or 1 times
{something}:  something 0 or more times
{something}+: something 1 or more times

***********************************************************************************

<Program> -> {<Command>} $


<Command> -> (<Dcl> | <Ass> | <Expr> | <RetCmd>) {linebreak}+

<Type> -> num
        | txt
        | bool
        | tuple squareBracketStart [<TypeList>] squareBracketStop
        | list squareBracketStart [<Type>] squareBracketStop
        | func squareBracketStart [<TypeListNoneAndGenerics>] squareBracketStop

<TypeImplicit> -> <Type>
                | func
                | var

<TypeGenerics> -> <Type>
                | identifier

<TypeNoneAndGenerics> -> <TypeGenerics>
                       | none

<TypeList> -> <Type> [separator <TypeList>]

<TypeListGenerics> -> <TypeGenerics> [separator <TypeListGenerics>]

<TypeListNoneAndGenerics> -> <TypeNoneAndGenerics> [separator <TypeListNoneAndGenerics>]

<Expr> -> parenStart <Expr> parenEnd
        | <FunCall>
        | <Value>

<Value> -> <Literal>
         | identifier

<Values> -> <Value> [separator <Values>]

<Literal> -> litNum
           | litText
           | litBool
           | <LitTuple>
           | <LitList>

<LitTuple> -> parenStart <Values> parenEnd

<LitList> ->  sqBracketStart <Values> sqBracketEnd

<DclVal> -> <Expr>
          | <LambdaExpr>

<Dcl> -> <TypeImplicit> id [equals <DclVal>]

<Ass> -> identifier equals <DclVal>

<LambdaExpr> -> parenStart [<FunDclParams>] parenEnd colon <TypeNoneAndGenerics> {linebreak} <LambdaBody>

<LambdaBody> -> curlyL {<Command>} curlyR

<FunDclParams> -> <FunDclParam> [separator <FunDclParams>]

<FunDclParam> -> <TypeListGenerics> id

<FunCall> -> identifier
           | <Arg> id {<Arg>}

<Arg> -> <Value>
       | <LambdaExpr>
       | <LambdaBody>

RetCmd -> return <Expr>
